(defwindow sidebar
  :monitor 0
  :geometry (geometry
    :x "5px"
    :y "0"
    :width "45px"
    :height "98%"
    :anchor "left center"
  )
  :stacking "fg"
  :exclusive true
  :focusable false
  :namespace "sidebar"
  (bar)
)

(defwidget bar []
  (box
    :orientation "v"
    :space-evenly false
    :class "bar"
    (box
      :class "area"
      :orientation "v"
      :valign "start"
      :space-evenly false
      :spacing "15"
      (mode)
      (workspaces)
    )
    (box :vexpand true)
    (box
      :class "area"
      :orientation "v"
      :valign "end"
      :space-evenly false
      :spacing "15"
      (brightness)
      (volume)
      (bluetooth)
      (time)
      (battery_display)
      (power)
    )
  )
)

(defwidget workspaces []
  (box
    :orientation "v"
    :class "workspaces"
    :space-evenly true
    :spacing 15
    (for wsp in workspaces
      (button
        :class "workspace-button ${wsp.id == selected_workspace ? "active": "inactive"}"
        :onclick "hyprctl dispatch workspace ${wsp.id}"
        {wsp.icon}
      )
    )
  )
)

(defvar workspaces '[
  {"id": "1", "icon": ""},
  {"id": "2", "icon": "󰮃"},
  {"id": "3", "icon": ""},
  {"id": "4", "icon": "󰍥"},
  {"id": "5", "icon": ""},
  {"id": "9", "icon": ""}
]')

(defpoll selected_workspace
  :initial "1"
  :interval "500ms"
  "hyprctl monitors -j | jq 'map(.activeWorkspace.id) | min'"
)

(defwidget volume []
  (eventbox
    :onhover "eww update show_volume_details=true"
    :onhoverlost "eww update show_volume_details=false"
    :class "volume-wrapper"
    (box
      :orientation "v"
      :space-evenly false
      :valign "center"
      (revealer
        :transition "slideup"
        :reveal show_volume_details
        :duration "350ms"
        (box
          :class "volume-slider-container"
          (scale
            :class "volume-slider"
            :orientation "v"
            :flipped true
            :min 0
            :max 100
            :onchange "pactl set-sink-volume @DEFAULT_SINK@ $(printf %.0f {})%"
            :value volume
          )
        )
      )
      (button :class "volume-button icon" "")
    )
  )
)

(defvar show_volume_details false)
(defpoll volume
  :initial "0"
  :interval "100ms"
  "echo \"$(pactl get-sink-volume @DEFAULT_SINK@ | awk '{ print $5 }')\" | sed \"s/%//\""
)

(defwidget brightness []
  (eventbox
    :onhover "eww update show_brightness_details=true"
    :onhoverlost "eww update show_brightness_details=false"
    :class "volume-wrapper"
    (box
      :orientation "v"
      :space-evenly false
      :valign "center"
      (revealer
        :transition "slideup"
        :reveal show_brightness_details
        :duration "350ms"
        (box
          :class "volume-slider-container"
          (scale
            :class "volume-slider"
            :orientation "v"
            :flipped true
            :min 0
            :max 255
            :onchange "brightnessctl set $(printf %f {})"
            :value brightness
          )
        )
      )
      (button :class "brightness-button icon" "󰃠")
    )
  )
)

(defvar show_brightness_details false)
(defpoll brightness
  :initial "0"
  :interval "100ms"
  "brightnessctl get"
)

(defwidget bluetooth []
  (button
    :class "bluetooth-button icon"
    :onclick "hyprctl dispatch exec blueman-manager"
    :tooltip "${bluetooth}"
    "󰂱"
  )
)

(defpoll bluetooth :interval "20s" "bluetoothctl devices Connected")

(defwidget time[]
  (box :orientation "v" :class "time" :halign "center" hour min))

(defpoll hour :interval "1s" "date +%I")
(defpoll min :interval "1s" "date +%M")

(defwidget battery_display[]
  (box
    :orientation "v"
    :class "battery"
    :halign "center"
    (label
      :class "icon"
      :tooltip "${battery}%"
      :text {battery > 80 ? "" : battery > 50 ? "" : battery > 20 ? "": ""}
    )
  )
)

(defpoll battery
  :interval "20s"
  "cat /sys/class/power_supply/BAT1/capacity"
)

(defwidget mode[]
  (button
    :class "mode-button"
    :onclick "hyprctl dispatch exec \"[float; pin; stayfocused] alacritty -e ranch\""
    {cur_mode == "main" ? "󰓩" : cur_mode == "window" ? "󱂬" : ""}
  )
)

(defpoll cur_mode :interval "100ms" "cat /tmp/hypr-submap")

(defwidget power_menu []
  (box
    :orientation "v"
    :spacing 15
    :class "power-menu-revealed"
    (button :class "lock-button" :onclick "hyprctl dispatch exec hyprlock" "󰌾")
    (button :class "reboot-button" :onclick "systemctl reboot" "󰜉")
  )
)

(defvar show_power_menu false)
(defwidget power []
  (eventbox
    :onhover "eww update show_power_menu=true"
    :onhoverlost "eww update show_power_menu=false"
    (box
      :orientation "v"
      :class "power-wrapper"
      :valign "center"
      :space-evenly false
      (revealer
        :transition "slideup"
        :reveal show_power_menu
        :duration "350ms"
        (power_menu)
      )
      (button :class "power-button icon" :onclick "systemctl poweroff" "")
    )
  )
)
